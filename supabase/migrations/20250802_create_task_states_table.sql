-- Create task_states table for unified task management
CREATE TABLE IF NOT EXISTS public.task_states (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    task_id TEXT NOT NULL,
    note_id UUID,
    completed BOOLEAN DEFAULT FALSE,
    pinned BOOLEAN DEFAULT FALSE,
    archived BOOLEAN DEFAULT FALSE,
    pin_order INTEGER,
    completed_at TIMESTAMPTZ,
    completed_by TEXT,
    completion_notes TEXT,
    pinned_at TIMESTAMPTZ,
    archived_at TIMESTAMPTZ,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Ensure one task state per user per task
    CONSTRAINT unique_user_task UNIQUE (user_id, task_id)
);

-- Create index for efficient queries
CREATE INDEX IF NOT EXISTS idx_task_states_user_id ON public.task_states(user_id);
CREATE INDEX IF NOT EXISTS idx_task_states_task_id ON public.task_states(task_id);
CREATE INDEX IF NOT EXISTS idx_task_states_note_id ON public.task_states(note_id);
CREATE INDEX IF NOT EXISTS idx_task_states_pinned ON public.task_states(user_id, pinned) WHERE pinned = true;
CREATE INDEX IF NOT EXISTS idx_task_states_completed ON public.task_states(user_id, completed) WHERE completed = true;

-- Enable RLS
ALTER TABLE public.task_states ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view their own task states" ON public.task_states
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own task states" ON public.task_states
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own task states" ON public.task_states
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own task states" ON public.task_states
    FOR DELETE USING (auth.uid() = user_id);